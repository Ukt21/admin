# main.py
# Boss Control ‚Äî —É—á—ë—Ç —Å–º–µ–Ω, —á–∞—Å–æ–≤ –∏ –ª–æ–∫–∞—Ü–∏–∏
# Python 3.10+, aiogram 3.x

import os
import sqlite3
from datetime import datetime, timedelta, timezone
from contextlib import closing
from typing import Optional, Tuple, List

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

# ==========================
# –ö–æ–Ω—Ñ–∏–≥
# ==========================
BOT_TOKEN = os.getenv("BOT_TOKEN", "PASTE_YOUR_TOKEN_HERE")
TZ = timezone(timedelta(hours=+5))  # –¢–∞—à–∫–µ–Ω—Ç/–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é; –ø–æ–º–µ–Ω—è–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
DB_PATH = os.getenv("DB_PATH", "boss_control.db")

bot = Bot(BOT_TOKEN)
dp = Dispatcher()


# ==========================
# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (SQLite)
# ==========================
def db():
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    return conn


def init_db():
    with closing(db()) as conn, conn:
        conn.executescript(
            """
            PRAGMA journal_mode=WAL;
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                full_name TEXT NOT NULL,
                username TEXT,
                created_at TEXT NOT NULL
            );

            CREATE TABLE IF NOT EXISTS shifts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                start_ts TEXT NOT NULL,
                end_ts TEXT,
                start_lat REAL,
                start_lon REAL,
                end_lat REAL,
                end_lon REAL,
                FOREIGN KEY (user_id) REFERENCES users(user_id)
            );

            CREATE INDEX IF NOT EXISTS idx_shifts_user ON shifts(user_id);
            """
        )


def get_user(user_id: int) -> Optional[sqlite3.Row]:
    with closing(db()) as conn, conn:
        cur = conn.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        return cur.fetchone()


def upsert_user(user_id: int, full_name: str, username: Optional[str]):
    with closing(db()) as conn, conn:
        if get_user(user_id):
            conn.execute(
                "UPDATE users SET full_name=?, username=? WHERE user_id=?",
                (full_name, username, user_id),
            )
        else:
            conn.execute(
                "INSERT INTO users(user_id, full_name, username, created_at) VALUES (?,?,?,?)",
                (user_id, full_name, username, now_iso()),
            )


def open_shift_exists(user_id: int) -> Optional[sqlite3.Row]:
    with closing(db()) as conn, conn:
        cur = conn.execute(
            "SELECT * FROM shifts WHERE user_id=? AND end_ts IS NULL ORDER BY start_ts DESC LIMIT 1",
            (user_id,),
        )
        return cur.fetchone()


def start_shift(user_id: int, lat: Optional[float] = None, lon: Optional[float] = None):
    with closing(db()) as conn, conn:
        conn.execute(
            "INSERT INTO shifts(user_id, start_ts, start_lat, start_lon) VALUES (?,?,?,?)",
            (user_id, now_iso(), lat, lon),
        )


def end_shift(user_id: int, lat: Optional[float] = None, lon: Optional[float] = None) -> Optional[sqlite3.Row]:
    with closing(db()) as conn, conn:
        cur = conn.execute(
            "SELECT * FROM shifts WHERE user_id=? AND end_ts IS NULL ORDER BY start_ts DESC LIMIT 1",
            (user_id,),
        )
        row = cur.fetchone()
        if not row:
            return None
        conn.execute(
            "UPDATE shifts SET end_ts=?, end_lat=?, end_lon=? WHERE id=?",
            (now_iso(), lat, lon, row["id"]),
        )
        return row


def list_shifts_between(user_id: int, since: datetime, until: datetime) -> List[sqlite3.Row]:
    with closing(db()) as conn, conn:
        cur = conn.execute(
            """
            SELECT * FROM shifts
            WHERE user_id=?
              AND start_ts >= ?
              AND (end_ts <= ? OR end_ts IS NULL)
            ORDER BY start_ts ASC
            """,
            (user_id, since.isoformat(), until.isoformat()),
        )
        return cur.fetchall()


def month_bounds(dt: datetime) -> Tuple[datetime, datetime]:
    start = dt.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
    if start.month == 12:
        end = start.replace(year=start.year + 1, month=1)
    else:
        end = start.replace(month=start.month + 1)
    return start, end


def parse_iso(s: str) -> datetime:
    return datetime.fromisoformat(s)


def now_iso() -> str:
    return datetime.now(TZ).replace(microsecond=0).isoformat()


def shift_duration_sec(row: sqlite3.Row) -> int:
    start = parse_iso(row["start_ts"])
    end = parse_iso(row["end_ts"]) if row["end_ts"] else datetime.now(TZ)
    return int((end - start).total_seconds())


def human_td(seconds: int) -> str:
    h = seconds // 3600
    m = (seconds % 3600) // 60
    return f"{h} —á {m:02d} –º–∏–Ω"


# ==========================
# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
# ==========================
class Reg(StatesGroup):
    waiting_fullname = State()


class Report(StatesGroup):
    picking_from = State()
    picking_to = State()


# ==========================
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# ==========================
def main_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üü¢ –ü—Ä–∏—à—ë–ª"), KeyboardButton(text="üî¥ –£—à—ë–ª")],
            [KeyboardButton(text="üïí –ú–æ–∏ —á–∞—Å—ã"), KeyboardButton(text="üìÖ –ú–æ–∏ —Å–º–µ–Ω—ã")],
            [KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", request_location=True)],
            [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ‚Ä¶",
    )


def settings_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="–ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û", callback_data="settings:rename")
    kb.button(text="–ù–∞–∑–∞–¥", callback_data="settings:back")
    return kb.as_markup()


def calendar_kb(year: int, month: int, mode: str) -> InlineKeyboardMarkup:
    """
    mode: 'from' –ª–∏–±–æ 'to' ‚Äî —á—Ç–æ –≤—ã–±–∏—Ä–∞–µ–º —Å–µ–π—á–∞—Å
    """
    import calendar as cal

    cal.setfirstweekday(cal.MONDAY)
    _, last_day = cal.monthrange(year, month)

    kb = InlineKeyboardBuilder()
    kb.button(text=f"{year}-{month:02d} ¬∑ –î–∞—Ç–∞ {('–æ—Ç' if mode=='from' else '–¥–æ')}", callback_data="noop")

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
    kb.row(
        InlineKeyboardButton(text="¬´", callback_data=f"cal:{mode}:nav:{year}:{month}:prev"),
        InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data=f"cal:{mode}:today"),
        InlineKeyboardButton(text="¬ª", callback_data=f"cal:{mode}:nav:{year}:{month}:next"),
    )

    # –®–∞–ø–∫–∞ –¥–Ω–µ–π
    for d in ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]:
        kb.button(text=d, callback_data="noop")
    kb.adjust(7)

    # –ü—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –¥–æ 1-–≥–æ
    first_weekday = cal.monthrange(year, month)[0]  # 0=–ü–Ω
    for _ in range(first_weekday):
        kb.button(text=" ", callback_data="noop")

    # –î–Ω–∏ –º–µ—Å—è—Ü–∞
    for day in range(1, last_day + 1):
        kb.button(text=f"{day:02d}", callback_data=f"cal:{mode}:pick:{year}:{month}:{day}")
    kb.adjust(7)

    # –°–±—Ä–æ—Å
    kb.row(InlineKeyboardButton(text="‚ôªÔ∏è –°–±—Ä–æ—Å", callback_data="cal:reset"))
    return kb.as_markup()


# ==========================
# /start
# ==========================
@dp.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    init_db()

    u = get_user(message.from_user.id)
    if not u:
        await state.set_state(Reg.waiting_fullname)
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —É—á—ë—Ç–∞ —Å–º–µ–Ω ¬´Boss Control¬ª.\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ —Å–≤–æ—ë **–§–ò–û** (–∫–∞–∫ –≤ —Ç–∞–±–µ–ª–µ).",
        )
        return

    # –°–≤–æ–¥–∫–∞ –º–µ—Å—è—Ü–∞ + –º–µ–Ω—é
    now = datetime.now(TZ)
    start, end = month_bounds(now)
    total_sec = 0
    for row in list_shifts_between(message.from_user.id, start, end):
        total_sec += shift_duration_sec(row)

    await message.answer(
        f"üïí –¢–≤–æ–∏ —á–∞—Å—ã –∑–∞ {now.strftime('%Y-%m')}: **{human_td(total_sec)}**\n"
        f"–í—ã–±–µ—Ä–∏ *–¥–∞—Ç—É –û–¢*, –∑–∞—Ç–µ–º *–¥–∞—Ç—É –î–û* –≤ ¬´–ú–æ–∏ —á–∞—Å—ã/–ú–æ–∏ —Å–º–µ–Ω—ã¬ª.",
        reply_markup=main_kb(),
    )


@dp.message(Reg.waiting_fullname)
async def reg_fullname(message: Message, state: FSMContext):
    full_name = message.text.strip()
    if len(full_name.split()) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é (–º–∏–Ω–∏–º—É–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è).")
        return

    upsert_user(message.from_user.id, full_name, message.from_user.username)
    await state.clear()
    await message.answer(f"–ì–æ—Ç–æ–≤–æ! –ó–∞–ø–æ–º–Ω–∏–ª —Ç–µ–±—è –∫–∞–∫: **{full_name}** ‚úÖ", reply_markup=main_kb())


# ==========================
# –õ–æ–∫–∞—Ü–∏—è
# ==========================
@dp.message(F.location)
async def got_location(message: Message):
    # –ü—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º, –ª–æ–∫–∞—Ü–∏—è –±—É–¥–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞ –ø—Ä–∏ –ø—Ä–∏—Ö–æ–¥–µ/—É—Ö–æ–¥–µ,
    # –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–æ–∏–∑–æ–π–¥—É—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ ¬´—Å–µ—Å—Å–∏–∏¬ª (—Ç—É—Ç –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã ‚Äî —Å—Ä–∞–∑—É –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏).
    lat = message.location.latitude
    lon = message.location.longitude
    await message.answer(f"üìç –õ–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞: {lat:.5f}, {lon:.5f}\n"
                         f"–ù–∞–∂–º–∏ ¬´üü¢ –ü—Ä–∏—à—ë–ª¬ª –∏–ª–∏ ¬´üî¥ –£—à—ë–ª¬ª, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å –µ—ë –∫ –æ—Ç–º–µ—Ç–∫–µ.")


# ==========================
# –ü—Ä–∏—à—ë–ª / –£—à—ë–ª
# ==========================
@dp.message(F.text == "üü¢ –ü—Ä–∏—à—ë–ª")
async def arrived(message: Message):
    init_db()
    u = get_user(message.from_user.id)
    if not u:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π –§–ò–û. –ù–∞–ø–∏—à–∏ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
        return

    if open_shift_exists(message.from_user.id):
        await message.answer("–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è —Å–º–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ—Ç—å ¬´üî¥ –£—à—ë–ª¬ª.")
        return

    lat, lon = None, None
    if message.location:
        lat, lon = message.location.latitude, message.location.longitude

    start_shift(message.from_user.id, lat, lon)
    await message.answer(f"‚úÖ –û—Ç–º–µ—á–µ–Ω–æ: –ø—Ä–∏—à—ë–ª –≤ {datetime.now(TZ).strftime('%H:%M')}")


@dp.message(F.text == "üî¥ –£—à—ë–ª")
async def left(message: Message):
    init_db()
    u = get_user(message.from_user.id)
    if not u:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π –§–ò–û. –ù–∞–ø–∏—à–∏ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
        return

    lat, lon = None, None
    if message.location:
        lat, lon = message.location.latitude, message.location.longitude

    row = end_shift(message.from_user.id, lat, lon)
    if not row:
        await message.answer("–û—Ç–∫—Ä—ã—Ç–æ–π —Å–º–µ–Ω—ã –Ω–µ—Ç. –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ ¬´üü¢ –ü—Ä–∏—à—ë–ª¬ª.")
        return

    dur = human_td(shift_duration_sec(row))
    await message.answer(f"üëã –û—Ç–º–µ—á–µ–Ω–æ: —É—à—ë–ª –≤ {datetime.now(TZ).strftime('%H:%M')}\n"
                         f"‚åõ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–º–µ–Ω—ã: {dur}")


# ==========================
# –û—Ç—á—ë—Ç—ã (–¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç)
# ==========================
def send_calendar_for_from() -> InlineKeyboardMarkup:
    dt = datetime.now(TZ)
    return calendar_kb(dt.year, dt.month, mode="from")


def send_calendar_for_to() -> InlineKeyboardMarkup:
    dt = datetime.now(TZ)
    return calendar_kb(dt.year, dt.month, mode="to")


@dp.message(F.text == "üïí –ú–æ–∏ —á–∞—Å—ã")
async def my_hours(message: Message, state: FSMContext):
    await state.set_state(Report.picking_from)
    await state.update_data(report_kind="hours")
    await message.answer("–í—ã–±–µ—Ä–∏ **–¥–∞—Ç—É –û–¢** (–∑–∞—Ç–µ–º ‚Äî –¥–∞—Ç—É –î–û).", reply_markup=send_calendar_for_from())


@dp.message(F.text == "üìÖ –ú–æ–∏ —Å–º–µ–Ω—ã")
async def my_shifts(message: Message, state: FSMContext):
    await state.set_state(Report.picking_from)
    await state.update_data(report_kind="shifts")
    await message.answer("–í—ã–±–µ—Ä–∏ **–¥–∞—Ç—É –û–¢** (–∑–∞—Ç–µ–º ‚Äî –¥–∞—Ç—É –î–û).", reply_markup=send_calendar_for_from())


@dp.callback_query(F.data.startswith("cal:reset"))
async def cal_reset(cb: CallbackQuery, state: FSMContext):
    await state.clear()
    await cb.message.edit_text("–°–±—Ä–æ—Å–∏–ª –≤—ã–±–æ—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∞. –ù–∞–∂–º–∏ ¬´üïí –ú–æ–∏ —á–∞—Å—ã¬ª –∏–ª–∏ ¬´üìÖ –ú–æ–∏ —Å–º–µ–Ω—ã¬ª.")
    await cb.answer()


@dp.callback_query(F.data.startswith("cal:from:today"))
async def cal_from_today(cb: CallbackQuery, state: FSMContext):
    dt = datetime.now(TZ).date()
    await state.update_data(date_from=str(dt))
    await state.set_state(Report.picking_to)
    await cb.message.edit_text(f"–î–∞—Ç–∞ –û–¢: **{dt}**\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ **–¥–∞—Ç—É –î–û**.", reply_markup=send_calendar_for_to())
    await cb.answer()


@dp.callback_query(F.data.startswith("cal:to:today"))
async def cal_to_today(cb: CallbackQuery, state: FSMContext):
    dt = datetime.now(TZ).date()
    data = await state.get_data()
    if "date_from" not in data:
        await cb.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –¥–∞—Ç—É –û–¢.", show_alert=True)
        return
    await state.update_data(date_to=str(dt))
    await finish_report(cb, state)


@dp.callback_query(F.data.startswith("cal:") & ~F.data.endswith("today") & ~F.data.endswith("reset"))
async def cal_common(cb: CallbackQuery, state: FSMContext):
    # cal:{mode}:{action}:{y}:{m}:{d or nav}
    parts = cb.data.split(":")
    _, mode, action, y, m, tail = parts[0], parts[1], parts[2], parts[3], parts[4], parts[5]

    if action == "nav":
        year = int(y)
        month = int(m)
        direction = tail  # prev/next
        if direction == "prev":
            month -= 1
            if month == 0:
                month = 12
                year -= 1
        else:
            month += 1
            if month == 13:
                month = 1
                year += 1
        kb = calendar_kb(year, month, mode)
        await cb.message.edit_reply_markup(kb)
        await cb.answer()
        return

    if action == "pick":
        year, month, day = int(y), int(m), int(tail)
        picked = datetime(year, month, day, tzinfo=TZ).date()
        if mode == "from":
            await state.update_data(date_from=str(picked))
            await state.set_state(Report.picking_to)
            await cb.message.edit_text(
                f"–î–∞—Ç–∞ –û–¢: **{picked}**\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ **–¥–∞—Ç—É –î–û**.",
                reply_markup=send_calendar_for_to(),
            )
        else:
            data = await state.get_data()
            if "date_from" not in data:
                await cb.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –¥–∞—Ç—É –û–¢.", show_alert=True)
                return
            await state.update_data(date_to=str(picked))
            await finish_report(cb, state)
        await cb.answer()
        return


async def finish_report(cb: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    date_from = datetime.fromisoformat(data["date_from"]).replace(tzinfo=TZ)
    date_to = datetime.fromisoformat(data["date_to"]).replace(tzinfo=TZ)
    if date_to < date_from:
        date_from, date_to = date_to, date_from

    # –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ –¥–∞—Ç—É –î–û (–¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è)
    date_to_end = date_to + timedelta(days=1)

    rows = list_shifts_between(cb.from_user.id, date_from, date_to_end)
    kind = data.get("report_kind", "hours")

    if kind == "hours":
        total = sum(shift_duration_sec(r) for r in rows)
        text = (
            f"üïí –ß–∞—Å—ã c **{date_from.date()}** –ø–æ **{date_to.date()}**:\n"
            f"–ò—Ç–æ–≥–æ: **{human_td(total)}**\n\n"
            f"–°–æ–≤–µ—Ç: –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∏ –≤–µ—Å—å –º–µ—Å—è—Ü ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å—á–∏—Ç–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
        )
    else:
        if not rows:
            text = f"üìÖ –°–º–µ–Ω—ã —Å **{date_from.date()}** –ø–æ **{date_to.date()}**: –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        else:
            lines = []
            for r in rows:
                start = parse_iso(r["start_ts"]).strftime("%Y-%m-%d %H:%M")
                end = parse_iso(r["end_ts"]).strftime("%Y-%m-%d %H:%M") if r["end_ts"] else "‚Äî"
                dur = human_td(shift_duration_sec(r))
                lines.append(f"‚Ä¢ {start} ‚Üí {end}  ({dur})")
            text = f"üìÖ –°–º–µ–Ω—ã —Å **{date_from.date()}** –ø–æ **{date_to.date()}**:\n" + "\n".join(lines)

    await state.clear()
    await cb.message.edit_text(text)


# ==========================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# ==========================
@dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings(message: Message):
    await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=settings_kb())


@dp.callback_query(F.data == "settings:rename")
async def settings_rename(cb: CallbackQuery, state: FSMContext):
    await state.set_state(Reg.waiting_fullname)
    await cb.message.answer("–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ **–§–ò–û** —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
    await cb.answer()


@dp.callback_query(F.data == "settings:back")
async def settings_back(cb: CallbackQuery):
    await cb.message.edit_text("–ì–æ—Ç–æ–≤–æ. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ.", reply_markup=None)
    await cb.answer()


# ==========================
# –ö–æ–º–∞–Ω–¥—ã /help /id
# ==========================
@dp.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n"
        "/id ‚Äî —Ç–≤–æ–π ID\n\n"
        "–ö–Ω–æ–ø–∫–∏:\n"
        "üü¢ –ü—Ä–∏—à—ë–ª / üî¥ –£—à—ë–ª ‚Äî –æ—Ç–º–µ—Ç–∫–∞ —Å–º–µ–Ω—ã\n"
        "üïí –ú–æ–∏ —á–∞—Å—ã ‚Äî —Å—É–º–º–∞ —á–∞—Å–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥\n"
        "üìÖ –ú–æ–∏ —Å–º–µ–Ω—ã ‚Äî —Å–ø–∏—Å–æ–∫ —Å–º–µ–Ω\n"
        "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é ‚Äî –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é –∫ –æ—Ç–º–µ—Ç–∫–µ"
    )


@dp.message(Command("id"))
async def cmd_id(message: Message):
    await message.answer(f"–¢–≤–æ–π Telegram ID: `{message.from_user.id}`", parse_mode=None)


# ==========================
# –ó–∞–ø—É—Å–∫
# ==========================
async def on_startup():
    init_db()
    print("Boss Control bot started.")


def main():
    import asyncio
    asyncio.run(dp.start_polling(bot, on_startup=on_startup()))


if __name__ == "__main__":
    main()
