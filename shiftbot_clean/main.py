# main.py
from __future__ import annotations

import os
from datetime import date, timedelta

from aiogram import Bot, Dispatcher, F, Router
from aiogram.client.bot import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    Message, CallbackQuery,
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove,
    InlineKeyboardMarkup, InlineKeyboardButton
)

from dotenv import load_dotenv
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

# ---- DB / Utils (–Ω—É–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ db.py / utils.py) ----
from db import (
    init_db, get_user_by_tg, create_user, set_user_department,
    get_or_create_shift, set_check_in, set_check_out,
    fetch_today_shifts, month_minutes_for_user, month_days_for_user,
)
# –¥–∏–∞–ø–∞–∑–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–¥–æ–±–∞–≤–ª—è–ª–∏ —Ä–∞–Ω–µ–µ)
try:
    from db import range_days_for_user  #, range_minutes_for_user
except ImportError:
    range_days_for_user = None

from utils import now_local, today_local_str, haversine_m

# ================== ENV ==================
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN", "")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")

MANAGERS_CHAT_ID = int(os.getenv("MANAGERS_CHAT_ID", "0"))

TIMEZONE = os.getenv("TIMEZONE", "Asia/Tashkent")
REPORT_HOUR = int(os.getenv("REPORT_HOUR", "23"))
REPORT_MINUTE = int(os.getenv("REPORT_MINUTE", "30"))

DEPARTMENTS = [
    d.strip() for d in os.getenv(
        "DEPARTMENTS", "–ó–∞–ª,–ö—É—Ö–Ω—è,–ë–∞—Ä,–•–æ—Å—Ç–µ—Å,–ü–∏—Ü—Ü–∞,–¢–µ—Ö–Ω–∏—á–∫–∏"
    ).split(",") if d.strip()
]

PLACE_LAT = float(os.getenv("PLACE_LAT", "0"))
PLACE_LON = float(os.getenv("PLACE_LON", "0"))
RADIUS_METERS = float(os.getenv("RADIUS_METERS", "150"))

# ================== BOT CORE ==================
bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
rt = Router()

# pending action per user: {"in"|"out"}
PENDING_ACTION: dict[int, str] = {}

# –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞: { tg_id: {"step": "from"|"to", "from": date|None, "to": date|None, "year": int, "month": int} }
RANGE_PICK: dict[int, dict] = {}


# ================== KEYBOARDS ==================
def staff_menu(status: str) -> ReplyKeyboardMarkup | ReplyKeyboardRemove:
    """
    status: 'idle'|'checked_in'|'checked_out'
    """
    if status == "idle":
        kb = [[KeyboardButton(text="üü¢ –ü—Ä–∏—à—ë–ª")]]
    elif status == "checked_in":
        kb = [[KeyboardButton(text="üî¥ –£—à—ë–ª")]]
    else:
        return ReplyKeyboardRemove()
    return ReplyKeyboardMarkup(
        resize_keyboard=True,
        keyboard=kb,
        input_field_placeholder="–û—Ç–º–µ—Ç—å —Å—Ç–∞—Ç—É—Å —Å–º–µ–Ω—ã"
    )


def request_location_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        resize_keyboard=True,
        one_time_keyboard=True,
        keyboard=[[KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)]],
        input_field_placeholder="–ù–∞–∂–º–∏, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é"
    )


def departments_kb(departments: list[str]) -> InlineKeyboardMarkup:
    rows, row = [], []
    for i, d in enumerate(departments, start=1):
        row.append(InlineKeyboardButton(text=d, callback_data=f"dept:{d}"))
        if i % 3 == 0:
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    return InlineKeyboardMarkup(inline_keyboard=rows)


def profile_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üïí –ú–æ–∏ —á–∞—Å—ã", callback_data="prof:hours"),
            InlineKeyboardButton(text="üìÖ –ú–æ–∏ —Å–º–µ–Ω—ã", callback_data="prof:days"),
        ],
        [
            InlineKeyboardButton(text="üìÜ –í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥", callback_data="prof:period"),
        ],
    ])


# ================== CALENDAR HELPERS ==================
def _next_month(y: int, m: int) -> tuple[int, int]:
    return (y + (m // 12), 1 if m == 12 else m + 1)

def _prev_month(y: int, m: int) -> tuple[int, int]:
    return (y - 1 if m == 1 else y, 12 if m == 1 else m - 1)

def _month_matrix(y: int, m: int) -> list[list[str]]:
    """–°–µ—Ç–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: –Ω–µ–¥–µ–ª–∏ –ø–æ 7 —è—á–µ–µ–∫, –¥–Ω–∏ –∫–∞–∫ 'DD' –ª–∏–±–æ ''."""
    first = date(y, m, 1)
    # weekday(): 0=–ü–Ω ... 6=–í—Å
    start_weekday = first.weekday()  # 0..6
    ny, nm = _next_month(y, m)
    last = date(ny, nm, 1) - timedelta(days=1)
    days = last.day

    cells = [""] * start_weekday + [f"{d:02d}" for d in range(1, days + 1)]
    while len(cells) % 7 != 0:
        cells.append("")
    return [cells[i:i + 7] for i in range(0, len(cells), 7)]

def _badge(d: date, picked_from: date | None, picked_to: date | None) -> str:
    if picked_from and d == picked_from:
        return "üü¢"
    if picked_to and d == picked_to:
        return "üî¥"
    if picked_from and picked_to and picked_from < d < picked_to:
        return "‚ñ´Ô∏è"
    return ""

def _calendar_kb(y: int, m: int, step: str, picked_from: date | None, picked_to: date | None) -> InlineKeyboardMarkup:
    title = f"{y}-{m:02d} ‚Ä¢ {'–î–∞—Ç–∞ –æ—Ç' if step == 'from' else '–î–∞—Ç–∞ –¥–æ'}"
    rows = [[InlineKeyboardButton(text=title, callback_data="rng:noop")]]

    py, pm = _prev_month(y, m)
    ny, nm = _next_month(y, m)
    rows.append([
        InlineKeyboardButton(text="¬´", callback_data=f"rng:nav:{py}-{pm:02d}"),
        InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data="rng:today"),
        InlineKeyboardButton(text="¬ª", callback_data=f"rng:nav:{ny}-{nm:02d}"),
    ])

    rows.append([InlineKeyboardButton(text=t, callback_data="rng:noop") for t in ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]])

    for wk in _month_matrix(y, m):
        wk_btns = []
        for cell in wk:
            if not cell:
                wk_btns.append(InlineKeyboardButton(text=" ", callback_data="rng:noop"))
                continue
            d = date(y, m, int(cell))
            mark = _badge(d, picked_from, picked_to)
            wk_btns.append(InlineKeyboardButton(text=f"{cell}{mark}", callback_data=f"rng:pick:{d.isoformat()}"))
        rows.append(wk_btns)

    rows.append([InlineKeyboardButton(text="‚ôªÔ∏è –°–±—Ä–æ—Å", callback_data="rng:reset")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


# ================== HELPERS ==================
def inside(lat: float, lon: float) -> tuple[bool, int]:
    d = int(haversine_m(lat, lon, PLACE_LAT, PLACE_LON))
    return (d <= RADIUS_METERS, d)

async def manager_notify(text: str):
    if MANAGERS_CHAT_ID != 0:
        await bot.send_message(MANAGERS_CHAT_ID, text, disable_web_page_preview=True)


async def report_text() -> str:
    rows = await fetch_today_shifts(today_local_str())
    if not rows:
        return "–°–µ–≥–æ–¥–Ω—è –æ—Ç–º–µ—Ç–æ–∫ –Ω–µ—Ç."
    by: dict[str, list] = {}
    for r in rows:
        by.setdefault(r["department"] or "–ë–µ–∑ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è", []).append(r)
    parts = [f"üìä –û—Ç—á—ë—Ç –∑–∞ {today_local_str()}\n"]
    for dname, arr in by.items():
        parts.append(f"<b>{dname}</b>")
        for r in arr:
            ci = r["check_in"][11:16] if r["check_in"] else "‚Äî"
            co = r["check_out"][11:16] if r["check_out"] else "‚è≥"
            parts.append(f"‚Ä¢ {r['full_name']}: {ci} ‚Äî {co}")
        parts.append("")
    return "\n".join(parts).strip()


# ================== FSM (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –§–ò–û) ==================
class Register(StatesGroup):
    waiting_full_name = State()


# ================== HANDLERS ==================
@rt.message(Command("help"))
async def cmd_help(m: Message):
    await m.answer(
        "üëã <b>ShiftBot ‚Äî –ø–æ–º–æ—â—å</b>\n"
        "‚Ä¢ /start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –≤—ã–±–æ—Ä –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è\n"
        "‚Ä¢ /menu ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏\n"
        "‚Ä¢ /myhours [YYYY-MM] ‚Äî –º–æ–∏ —á–∞—Å—ã –∑–∞ –º–µ—Å—è—Ü\n"
        "‚Ä¢ /mydays [YYYY-MM] ‚Äî –º–æ–∏ –¥–Ω–∏ –∏ —á–∞—Å—ã –∑–∞ –º–µ—Å—è—Ü\n"
        "‚Ä¢ /myperiod ‚Äî —á–∞—Å—ã –∑–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (–∫–∞–ª–µ–Ω–¥–∞—Ä—å)\n"
        "‚Ä¢ /report ‚Äî –æ—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è"
    )


@rt.message(Command("start"))
async def cmd_start(m: Message, state: FSMContext):
    await init_db()
    u = await get_user_by_tg(m.from_user.id)
    if u is None:
        await state.set_state(Register.waiting_full_name)
        return await m.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ <b>–§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):"
        )
    if not u.department:
        return await m.answer("üß© –í—ã–±–µ—Ä–∏ —Å–≤–æ—ë –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:", reply_markup=departments_kb(DEPARTMENTS))
    await m.answer("‚úÖ –ì–æ—Ç–æ–≤–æ. –ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –Ω–∏–∂–µ.", reply_markup=staff_menu("idle"))
    await m.answer("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", reply_markup=profile_kb())


@rt.message(Register.waiting_full_name)
async def reg_full_name(m: Message, state: FSMContext):
    full_name = (m.text or "").strip()
    if len(full_name.split()) < 2:
        return await m.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á).")
    u = await create_user(m.from_user.id, full_name)
    await state.clear()
    await m.answer(
        f"‚úÖ –°–ø–∞—Å–∏–±–æ, {full_name}!\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ—ë –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:",
        reply_markup=departments_kb(DEPARTMENTS)
    )


@rt.callback_query(F.data.startswith("dept:"))
async def cb_set_dept(cq: CallbackQuery):
    u = await get_user_by_tg(cq.from_user.id)
    if u is None:
        u = await create_user(cq.from_user.id, cq.from_user.full_name or "–ë–µ–∑ –∏–º–µ–Ω–∏")
    dept = cq.data.split(":", 1)[1]
    await set_user_department(u.id, dept)
    await cq.message.edit_text(f"‚úÖ –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: <b>{dept}</b>")
    await cq.message.answer("–ì–æ—Ç–æ–≤–æ. –ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –Ω–∏–∂–µ.", reply_markup=staff_menu("idle"))
    await cq.message.answer("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", reply_markup=profile_kb())


@rt.message(Command("menu"))
async def cmd_menu(m: Message):
    await init_db()
    u = await get_user_by_tg(m.from_user.id)
    if u is None or not u.department:
        return await m.answer("–°–Ω–∞—á–∞–ª–∞ /start.")
    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π —Å–º–µ–Ω–µ
    rows = await fetch_today_shifts(today_local_str())
    status = "idle"
    for r in rows:
        if r["full_name"] == u.full_name:
            if r["check_in"] and not r["check_out"]:
                status = "checked_in"
            elif r["check_out"]:
                status = "checked_out"
            break
    await m.answer("üìã –ú–µ–Ω—é", reply_markup=staff_menu(status))
    await m.answer("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", reply_markup=profile_kb())


@rt.message(F.text.startswith("üü¢ –ü—Ä–∏—à—ë–ª"))
async def ask_loc_in(m: Message):
    await init_db()
    u = await get_user_by_tg(m.from_user.id)
    if u is None or not u.department:
        return await m.answer("–°–Ω–∞—á–∞–ª–∞ /start.")
    PENDING_ACTION[m.from_user.id] = "in"
    await m.answer("üìç –û—Ç–ø—Ä–∞–≤—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–º –ø—Ä–∏—Ö–æ–¥.", reply_markup=request_location_kb())


@rt.message(F.text.startswith("üî¥ –£—à—ë–ª"))
async def ask_loc_out(m: Message):
    await init_db()
    u = await get_user_by_tg(m.from_user.id)
    if u is None or not u.department:
        return await m.answer("–°–Ω–∞—á–∞–ª–∞ /start.")
    PENDING_ACTION[m.from_user.id] = "out"
    await m.answer("üìç –û—Ç–ø—Ä–∞–≤—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–º —É—Ö–æ–¥.", reply_markup=request_location_kb())


@rt.message(F.location)
async def on_location(m: Message):
    await init_db()
    u = await get_user_by_tg(m.from_user.id)
    if u is None or not u.department:
        return await m.answer("–°–Ω–∞—á–∞–ª–∞ /start.")
    act = PENDING_ACTION.get(m.from_user.id)
    if act not in ("in", "out"):
        return await m.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –≤ /menu.")
    ok, dist = inside(m.location.latitude, m.location.longitude)
    if not ok:
        await m.answer(f"‚ùå –í–Ω–µ –≥–µ–æ–∑–æ–Ω—ã (~{dist} –º). –û–±—Ä–∞—Ç–∏—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.", reply_markup=staff_menu("idle"))
        await manager_notify(f"‚ö†Ô∏è {u.full_name} ({u.department}) –ø–æ–ø—ã—Ç–∫–∞ {('–ø—Ä–∏—Ö–æ–¥–∞' if act=='in' else '—É—Ö–æ–¥–∞')} –≤–Ω–µ –∑–æ–Ω—ã (~{dist} –º).")
        return
    wd = today_local_str()
    await get_or_create_shift(u.id, wd)
    ts = now_local().isoformat()
    if act == "in":
        ok, _ = await set_check_in(u.id, wd, ts)
        if not ok:
            return await m.answer("‚ÑπÔ∏è –ü—Ä–∏—Ö–æ–¥ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω —Å–µ–≥–æ–¥–Ω—è.", reply_markup=staff_menu("checked_in"))
        await m.answer("‚úÖ –ü—Ä–∏—Ö–æ–¥ –æ—Ç–º–µ—á–µ–Ω. –£–¥–∞—á–Ω–æ–π —Å–º–µ–Ω—ã!", reply_markup=staff_menu("checked_in"))
        await manager_notify(f"üü¢ {u.full_name} ({u.department}) –ø—Ä–∏—à—ë–ª –≤ {now_local().strftime('%H:%M')} (–≤ —Ä–∞–¥–∏—É—Å–µ, {dist} –º).")
    else:
        ok, msg = await set_check_out(u.id, wd, ts)
        if not ok:
            return await m.answer(msg, reply_markup=staff_menu("checked_in"))
        await m.answer("‚úÖ –£—Ö–æ–¥ –æ—Ç–º–µ—á–µ–Ω. –•–æ—Ä–æ—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞!", reply_markup=staff_menu("checked_out"))
        await manager_notify(f"üî¥ {u.full_name} ({u.department}) —É—à—ë–ª –≤ {now_local().strftime('%H:%M')} (–≤ —Ä–∞–¥–∏—É—Å–µ, {dist} –º).")
    PENDING_ACTION.pop(m.from_user.id, None)


@rt.message(Command("report"))
async def cmd_report(m: Message):
    await m.answer(await report_text())


@rt.message(Command("myhours"))
async def cmd_myhours(m: Message):
    await init_db()
    u = await get_user_by_tg(m.from_user.id)
    if u is None:
        return await m.answer("–°–Ω–∞—á–∞–ª–∞ /start.")
    args = m.text.split(maxsplit=1)
    if len(args) == 2:
        try:
            y, mon = map(int, args[1].split("-"))
        except Exception:
            return await m.answer("–§–æ—Ä–º–∞—Ç: /myhours 2025-10")
    else:
        n = now_local()
        y, mon = n.year, n.month
    mins = await month_minutes_for_user(u.id, y, mon)
    await m.answer(f"‚è± –¢–≤–æ–∏ —á–∞—Å—ã –∑–∞ {y}-{mon:02d}: <b>{mins//60} —á {mins%60:02d} –º–∏–Ω</b>")


@rt.message(Command("mydays"))
async def cmd_mydays(m: Message):
    await init_db()
    u = await get_user_by_tg(m.from_user.id)
    if u is None:
        return await m.answer("–°–Ω–∞—á–∞–ª–∞ /start.")
    args = m.text.split(maxsplit=1)
    if len(args) == 2:
        try:
            y, mon = map(int, args[1].split("-"))
        except Exception:
            return await m.answer("–§–æ—Ä–º–∞—Ç: /mydays 2025-10")
    else:
        n = now_local()
        y, mon = n.year, n.month
    days = await month_days_for_user(u.id, y, mon)
    if not days:
        return await m.answer("–ù–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–º–µ–Ω –∑–∞ –ø–µ—Ä–∏–æ–¥.")
    lines = [f"üìÖ –ú–æ–∏ –¥–Ω–∏ –∑–∞ {y}-{mon:02d}"]
    for d in days:
        lines.append(f"{d['date']}: {d['minutes']//60} —á {d['minutes']%60:02d} –º–∏–Ω")
    await m.answer("\n".join(lines))


@rt.message(Command("myperiod"))
async def cmd_myperiod(m: Message):
    await init_db()
    u = await get_user_by_tg(m.from_user.id)
    if u is None or not u.department:
        return await m.answer("–°–Ω–∞—á–∞–ª–∞ /start.")
    t = now_local().date()
    RANGE_PICK[m.from_user.id] = {"step": "from", "from": None, "to": None, "year": t.year, "month": t.month}
    await m.answer(
        "üìÜ –í—ã–±–µ—Ä–∏ <b>–¥–∞—Ç—É –û–¢</b> (–∑–∞—Ç–µ–º ‚Äî –¥–∞—Ç—É –î–û).",
        reply_markup=_calendar_kb(t.year, t.month, "from", None, None)
    )


@rt.callback_query(F.data.startswith("rng:"))
async def cb_range(cq: CallbackQuery):
    uid = cq.from_user.id
    st = RANGE_PICK.get(uid)
    if not st:
        t = now_local().date()
        st = RANGE_PICK.setdefault(uid, {"step": "from", "from": None, "to": None, "year": t.year, "month": t.month})

    action, *rest = cq.data.split(":")[1:]

    if action == "noop":
        return await cq.answer()

    if action == "reset":
        t = now_local().date()
        st.update({"step": "from", "from": None, "to": None, "year": t.year, "month": t.month})
        return await cq.message.edit_reply_markup(
            reply_markup=_calendar_kb(st["year"], st["month"], st["step"], st["from"], st["to"])
        )

    if action == "today":
        t = now_local().date()
        st["year"], st["month"] = t.year, t.month
        return await cq.message.edit_reply_markup(
            reply_markup=_calendar_kb(st["year"], st["month"], st["step"], st["from"], st["to"])
        )

    if action == "nav":
        ym = rest[0]
        y, m = map(int, ym.split("-"))
        st["year"], st["month"] = y, m
        return await cq.message.edit_reply_markup(
            reply_markup=_calendar_kb(st["year"], st["month"], st["step"], st["from"], st["to"])
        )

    if action == "pick":
        iso = rest[0]
        y, mo, d = map(int, iso.split("-"))
        picked = date(y, mo, d)

        if st["step"] == "from":
            st["from"] = picked
            st["to"] = None
            st["step"] = "to"
            await cq.message.edit_text("üìÜ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ <b>–¥–∞—Ç—É –î–û</b>.")
            return await cq.message.edit_reply_markup(
                reply_markup=_calendar_kb(st["year"], st["month"], st["step"], st["from"], st["to"])
            )

        # step == "to"
        st["to"] = picked
        if st["from"] and st["to"] and st["to"] < st["from"]:
            st["from"], st["to"] = st["to"], st["from"]

        df, dt = st["from"], st["to"]
        if not (df and dt):
            return await cq.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –æ–±–µ –¥–∞—Ç—ã.")

        # –°—á–∏—Ç–∞–µ–º
        if range_days_for_user is None:
            return await cq.message.edit_text("–§—É–Ω–∫—Ü–∏–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ db.py. –î–æ–±–∞–≤—å range_days_for_user().")

        u = await get_user_by_tg(uid)
        days = await range_days_for_user(u.id, df.isoformat(), dt.isoformat())
        total = sum(x["minutes"] for x in days)

        if not days:
            txt = f"‚è± –ü–µ—Ä–∏–æ–¥: {df.isoformat()} ‚Äî {dt.isoformat()}\n–î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç (–Ω–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–º–µ–Ω)."
        else:
            lines = [
                f"‚è± –ü–µ—Ä–∏–æ–¥: <b>{df.isoformat()}</b> ‚Äî <b>{dt.isoformat()}</b>",
                f"–ò—Ç–æ–≥–æ: <b>{total//60} —á {total%60:02d} –º–∏–Ω</b>",
                ""
            ]
            for x in days:
                lines.append(f"{x['date']}: {x['minutes']//60} —á {x['minutes']%60:02d} –º–∏–Ω")
            txt = "\n".join(lines)

        st.update({"step": "from", "from": None, "to": None})
        await cq.message.edit_text(txt)
        return await cq.message.edit_reply_markup(
            reply_markup=_calendar_kb(st["year"], st["month"], st["step"], st["from"], st["to"])
        )


@rt.callback_query(F.data.startswith("prof:"))
async def cb_profile(cq: CallbackQuery):
    action = cq.data.split(":")[1]
    u = await get_user_by_tg(cq.from_user.id)
    if u is None or not u.department:
        return await cq.answer("–°–Ω–∞—á–∞–ª–∞ /start –∏ –≤—ã–±–µ—Ä–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ", show_alert=True)

    today = now_local().date()
    y, mon = today.year, today.month

    if action == "hours":
        mins = await month_minutes_for_user(u.id, y, mon)
        text = (
            f"üïí <b>–ú–æ–∏ —á–∞—Å—ã</b>\n"
            f"–ü–µ—Ä–∏–æ–¥: {y}-{mon:02d}\n"
            f"–ò—Ç–æ–≥–æ: <b>{mins//60} —á {mins%60:02d} –º–∏–Ω</b>"
        )
        try:
            await cq.message.edit_text(text, reply_markup=profile_kb())
        except Exception:
            await cq.message.answer(text, reply_markup=profile_kb())
        return await cq.answer()

    if action == "days":
        days = await month_days_for_user(u.id, y, mon)
        if not days:
            text = f"üìÖ <b>–ú–æ–∏ —Å–º–µ–Ω—ã</b>\n–ü–µ—Ä–∏–æ–¥: {y}-{mon:02d}\n–ù–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–º–µ–Ω."
        else:
            lines = [f"üìÖ <b>–ú–æ–∏ —Å–º–µ–Ω—ã</b>\n–ü–µ—Ä–∏–æ–¥: {y}-{mon:02d}", ""]
            for d in days:
                lines.append(f"{d['date']}: {d['minutes']//60} —á {d['minutes']%60:02d} –º–∏–Ω")
            text = "\n".join(lines)
        try:
            await cq.message.edit_text(text, reply_markup=profile_kb())
        except Exception:
            await cq.message.answer(text, reply_markup=profile_kb())
        return await cq.answer()

    if action == "period":
        t = now_local().date()
        RANGE_PICK[cq.from_user.id] = {"step": "from", "from": None, "to": None, "year": t.year, "month": t.month}
        await cq.message.edit_text("üìÜ –í—ã–±–µ—Ä–∏ <b>–¥–∞—Ç—É –û–¢</b> (–ø–æ—Ç–æ–º ‚Äî –¥–∞—Ç—É –î–û).")
        await cq.message.edit_reply_markup(
            reply_markup=_calendar_kb(t.year, t.month, "from", None, None)
        )
        return await cq.answer()


# ================== SCHEDULER ==================
async def scheduler_setup(sched: AsyncIOScheduler):
    async def _send():
        await bot.send_message(MANAGERS_CHAT_ID, await report_text())

    sched.add_job(
        lambda: bot.loop.create_task(_send()),
        CronTrigger(hour=REPORT_HOUR, minute=REPORT_MINUTE, timezone=TIMEZONE),
        id="daily_report",
        replace_existing=True
    )


# ================== ENTRYPOINT ==================
async def main():
    await init_db()
    dp.include_router(rt)
    sched = AsyncIOScheduler()
    await scheduler_setup(sched)
    sched.start()
    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
