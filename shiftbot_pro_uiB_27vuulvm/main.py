from __future__ import annotations\nimport os\nfrom aiogram import Bot, Dispatcher, F, Router\nfrom aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove\nfrom aiogram.enums import ParseMode\nfrom aiogram.client.bot import DefaultBotProperties\nfrom aiogram.filters import Command\nfrom aiogram.fsm.storage.memory import MemoryStorage\nfrom dotenv import load_dotenv\nfrom apscheduler.schedulers.asyncio import AsyncIOScheduler\nfrom apscheduler.triggers.cron import CronTrigger\nfrom db import init_db, get_user_by_tg, create_user, set_user_department, get_or_create_shift, set_check_in, set_check_out, fetch_today_shifts, month_minutes_for_user, month_days_for_user, month_minutes_by_user\nfrom keyboards import departments_kb, staff_menu, request_location_kb, admin_root_kb\nfrom utils import now_local, today_local_str, haversine_m\n\nload_dotenv()\nBOT_TOKEN=os.getenv('BOT_TOKEN'); MANAGERS_CHAT_ID=int(os.getenv('MANAGERS_CHAT_ID','0'))\nTIMEZONE=os.getenv('TIMEZONE','Asia/Tashkent'); REPORT_HOUR=int(os.getenv('REPORT_HOUR','23')); REPORT_MINUTE=int(os.getenv('REPORT_MINUTE','30'))\nDEPARTMENTS=[d.strip() for d in os.getenv('DEPARTMENTS','–ó–∞–ª,–ö—É—Ö–Ω—è,–ë–∞—Ä,–•–æ—Å—Ç–µ—Å,–ü–∏—Ü—Ü–∞,–¢–µ—Ö–Ω–∏—á–∫–∏').split(',') if d.strip()]\nPLACE_LAT=float(os.getenv('PLACE_LAT','0')); PLACE_LON=float(os.getenv('PLACE_LON','0')); RADIUS_METERS=float(os.getenv('RADIUS_METERS','150'))\nADMIN_IDS=set(int(x.strip()) for x in os.getenv('ADMIN_IDS','').split(',') if x.strip().isdigit())\nif not BOT_TOKEN: raise RuntimeError('BOT_TOKEN is not set')\n\nbot=Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))\ndp=Dispatcher(storage=MemoryStorage()); rt=Router()\nPENDING_ACTION={}; ADMIN_FILTERS={}\n\ndef is_admin(uid:int)->bool: return uid in ADMIN_IDS\nasync def manager_notify(t:str):\n    if MANAGERS_CHAT_ID!=0: await bot.send_message(MANAGERS_CHAT_ID,t, disable_web_page_preview=True)\n\n@rt.message(Command('help'))\nasync def cmd_help(m:Message):\n    await m.answer('üëã <b>ShiftBot ‚Äî –ø–æ–º–æ—â—å</b>\n‚Ä¢ /start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ\n‚Ä¢ /menu ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏\n‚Ä¢ /myhours [YYYY-MM] ‚Äî –º–æ–∏ —á–∞—Å—ã\n‚Ä¢ /mydays [YYYY-MM] ‚Äî –º–æ–∏ –¥–Ω–∏ –∏ —á–∞—Å—ã\n‚Ä¢ /report ‚Äî –æ—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è' + ('\n‚Ä¢ /admin ‚Äî –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' if is_admin(m.from_user.id) else ''))\n\n@rt.message(Command('start'))\nasync def cmd_start(m:Message):\n    await init_db(); u=await get_user_by_tg(m.from_user.id)\n    if u is None: u=await create_user(m.from_user.id, m.from_user.full_name or '–ë–µ–∑ –∏–º–µ–Ω–∏')\n    if not u.department: return await m.answer('üß© –í—ã–±–µ—Ä–∏ —Å–≤–æ—ë –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:', reply_markup=departments_kb(DEPARTMENTS))\n    await m.answer('‚úÖ –ì–æ—Ç–æ–≤–æ. –ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –Ω–∏–∂–µ.', reply_markup=staff_menu('idle'))\n\n@rt.callback_query(F.data.startswith('dept:'))\nasync def cb_dept(cq:CallbackQuery):\n    u=await get_user_by_tg(cq.from_user.id)\n    if u is None: u=await create_user(cq.from_user.id, cq.from_user.full_name or '–ë–µ–∑ –∏–º–µ–Ω–∏')\n    dept=cq.data.split(':',1)[1]; await set_user_department(u.id, dept)\n    await cq.message.edit_text(f'‚úÖ –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: <b>{dept}</b>')\n    await cq.message.answer('–ì–æ—Ç–æ–≤–æ. –ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –Ω–∏–∂–µ.', reply_markup=staff_menu('idle'))\n\n@rt.message(Command('menu'))\nasync def cmd_menu(m:Message):\n    await init_db(); u=await get_user_by_tg(m.from_user.id)\n    if u is None or not u.department: return await m.answer('–°–Ω–∞—á–∞–ª–∞ /start.')\n    rows=await fetch_today_shifts(today_local_str()); status='idle'\n    for r in rows:\n        if r['full_name']==u.full_name:\n            if r['check_in'] and not r['check_out']: status='checked_in'\n            elif r['check_out']: status='checked_out'\n            break\n    await m.answer('üìã –ú–µ–Ω—é', reply_markup=staff_menu(status))\n\n@rt.message(F.text.startswith('üü¢ –ü—Ä–∏—à—ë–ª'))\nasync def ask_in(m:Message):\n    await init_db(); u=await get_user_by_tg(m.from_user.id)\n    if u is None or not u.department: return await m.answer('–°–Ω–∞—á–∞–ª–∞ /start.')\n    PENDING_ACTION[m.from_user.id]='in'\n    await m.answer('üìç –û—Ç–ø—Ä–∞–≤—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–º –ø—Ä–∏—Ö–æ–¥.', reply_markup=request_location_kb())\n\n@rt.message(F.text.startswith('üî¥ –£—à—ë–ª'))\nasync def ask_out(m:Message):\n    await init_db(); u=await get_user_by_tg(m.from_user.id)\n    if u is None or not u.department: return await m.answer('–°–Ω–∞—á–∞–ª–∞ /start.')\n    PENDING_ACTION[m.from_user.id]='out'\n    await m.answer('üìç –û—Ç–ø—Ä–∞–≤—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–º —É—Ö–æ–¥.', reply_markup=request_location_kb())\n\ndef inside(lat,lon):\n    from utils import haversine_m\n    d=int(haversine_m(lat,lon,PLACE_LAT,PLACE_LON)); return (d<=RADIUS_METERS,d)\n\n@rt.message(F.location)\nasync def on_loc(m:Message):\n    await init_db(); u=await get_user_by_tg(m.from_user.id)\n    if u is None or not u.department: return await m.answer('–°–Ω–∞—á–∞–ª–∞ /start.')\n    act=PENDING_ACTION.get(m.from_user.id)\n    if act not in ('in','out'): return await m.answer('–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –≤ /menu.')\n    ok,dist=inside(m.location.latitude, m.location.longitude)\n    if not ok:\n        await m.answer(f'‚ùå –í–Ω–µ –≥–µ–æ–∑–æ–Ω—ã (~{dist} –º). –û–±—Ä–∞—Ç–∏—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.', reply_markup=staff_menu('idle'))\n        await manager_notify(f'‚ö†Ô∏è {u.full_name} ({u.department}) –ø–æ–ø—ã—Ç–∫–∞ {("–ø—Ä–∏—Ö–æ–¥–∞" if act=="in" else "—É—Ö–æ–¥–∞")} –≤–Ω–µ –∑–æ–Ω—ã (~{dist} –º).')\n        return\n    wd=today_local_str(); await get_or_create_shift(u.id, wd); ts=now_local().isoformat()\n    if act=='in':\n        ok,_=await set_check_in(u.id, wd, ts)\n        if not ok: return await m.answer('‚ÑπÔ∏è –ü—Ä–∏—Ö–æ–¥ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω —Å–µ–≥–æ–¥–Ω—è.', reply_markup=staff_menu('checked_in'))\n        await m.answer('‚úÖ –ü—Ä–∏—Ö–æ–¥ –æ—Ç–º–µ—á–µ–Ω. –£–¥–∞—á–Ω–æ–π —Å–º–µ–Ω—ã!', reply_markup=staff_menu('checked_in'))\n        await manager_notify(f'üü¢ {u.full_name} ({u.department}) –ø—Ä–∏—à—ë–ª –≤ {now_local().strftime("%H:%M")} (–≤ —Ä–∞–¥–∏—É—Å–µ, {dist} –º).')\n    else:\n        ok,msg=await set_check_out(u.id, wd, ts)\n        if not ok: return await m.answer(msg, reply_markup=staff_menu('checked_in'))\n        await m.answer('‚úÖ –£—Ö–æ–¥ –æ—Ç–º–µ—á–µ–Ω. –•–æ—Ä–æ—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞!', reply_markup=staff_menu('checked_out'))\n        await manager_notify(f'üî¥ {u.full_name} ({u.department}) —É—à—ë–ª –≤ {now_local().strftime("%H:%M")} (–≤ —Ä–∞–¥–∏—É—Å–µ, {dist} –º).')\n    PENDING_ACTION.pop(m.from_user.id, None)\n\nasync def report_text()->str:\n    rows=await fetch_today_shifts(today_local_str())\n    if not rows: return '–°–µ–≥–æ–¥–Ω—è –æ—Ç–º–µ—Ç–æ–∫ –Ω–µ—Ç.'\n    by={}\n    for r in rows: by.setdefault(r['department'] or '–ë–µ–∑ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è', []).append(r)\n    parts=[f'üìä –û—Ç—á—ë—Ç –∑–∞ {today_local_str()}\n']\n    for d,arr in by.items():\n        parts.append(f'<b>{d}</b>')\n        for r in arr:\n            ci=r['check_in'][11:16] if r['check_in'] else '‚Äî'\n            co=r['check_out'][11:16] if r['check_out'] else '‚è≥'\n            parts.append(f'‚Ä¢ {r["full_name"]}: {ci} ‚Äî {co}')\n        parts.append('')\n    return '\n'.join(parts).strip()\n\n@rt.message(Command('report'))\nasync def cmd_report(m:Message):\n    await m.answer(await report_text())\n\n@rt.message(Command('myhours'))\nasync def cmd_myhours(m:Message):\n    await init_db(); u=await get_user_by_tg(m.from_user.id)\n    if u is None: return await m.answer('–°–Ω–∞—á–∞–ª–∞ /start.')\n    args=m.text.split(maxsplit=1)\n    if len(args)==2:\n        try: y,mon=map(int,args[1].split('-'))\n        except: return await m.answer('–§–æ—Ä–º–∞—Ç: /myhours 2025-10')\n    else:\n        n=now_local(); y,mon=n.year,n.month\n    mins=await month_minutes_for_user(u.id,y,mon)\n    await m.answer(f'‚è± –¢–≤–æ–∏ —á–∞—Å—ã –∑–∞ {y}-{mon:02d}: <b>{mins//60} —á {mins%60:02d} –º–∏–Ω</b>')\n\n@rt.message(Command('mydays'))\nasync def cmd_mydays(m:Message):\n    await init_db(); u=await get_user_by_tg(m.from_user.id)\n    if u is None: return await m.answer('–°–Ω–∞—á–∞–ª–∞ /start.')\n    args=m.text.split(maxsplit=1)\n    if len(args)==2:\n        try: y,mon=map(int,args[1].split('-'))\n        except: return await m.answer('–§–æ—Ä–º–∞—Ç: /mydays 2025-10')\n    else:\n        n=now_local(); y,mon=n.year,n.month\n    days=await month_days_for_user(u.id,y,mon)\n    if not days: return await m.answer('–ù–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–º–µ–Ω –∑–∞ –ø–µ—Ä–∏–æ–¥.')\n    lines=[f'üìÖ –ú–æ–∏ –¥–Ω–∏ –∑–∞ {y}-{mon:02d}']\n    for d in days: lines.append(f"{d['date']}: {d['minutes']//60} —á {d['minutes']%60:02d} –º–∏–Ω")\n    await m.answer('\n'.join(lines))\n\nasync def scheduler_setup(sched:AsyncIOScheduler):\n    async def _send():\n        await bot.send_message(MANAGERS_CHAT_ID, await report_text())\n    sched.add_job(lambda: bot.loop.create_task(_send()), CronTrigger(hour=REPORT_HOUR, minute=REPORT_MINUTE, timezone=TIMEZONE), id='daily_report', replace_existing=True)\n\nasync def main():\n    await init_db(); dp.include_router(rt)\n    sched=AsyncIOScheduler(); await scheduler_setup(sched); sched.start()\n    await dp.start_polling(bot)\n\nif __name__=='__main__':\n    import asyncio; asyncio.run(main())\n